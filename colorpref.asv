function [color_preference,filename,allbw,background,imgBold,imgA] = colorpref(flylength,multip,darker,ptThresh)
% For shacking video every minute

%       flylength   approximate length of flies in videos in pixels 
%                   (default = 10). 
%       multip      multiplies the difference between reference frame and 
%                   background frame for flies track (default = 10). Use
%                   higher multip if some flies are not found
%       darker      make background darker for better difference
%                   (default = 0.93). Use smaller darker if there is too
%                   much noise on onelog and false object found.
%       ptThresh    Threshold for video stabilization (default = 0.1). Use
%                   smaller ptThresh if there are few objects on video and
%                   stabilization is not good
%
%  out: frames      structure file with all the frames
%       filename    path for the tested video file
%       fl          binary image of found flies
%       imgA        first frame of the video
%       imgBold     b/w image with flies to find
%           
if nargin<2; flylength = 18; end
if nargin<3; multip = 10; end
if nargin<4; darker = 0.93; end
if nargin<5; ptThresh = 0.1; end
flyarea_min = floor(flylength*1.5);                                         % Objects with area of >=flyarea_min pixels are considered to be candidates to be a fly (default flysize = 5)
tube_diameter = floor(flylength*1.5);                                       % Width of tubes used to limit to one fly in a tube (default width = 15)
framerate = 60;                                                             % Framerate for color preference 1 frame per seconds*framerate (default framerate = 60)
color_preference = [];
T1 = [];
T2 = [];
T3 = [];
t=1;
%Load video files
frame = [];
[FileName, PathName] = uigetfile('*.*' , 'Select video files','MultiSelect','on');
filename = fullfile(PathName, FileName);

% Determine how many video files you selected
if iscell(filename)
    NumberOfFiles=length(filename);
elseif filename ~= 0
    NumberOfFiles = 1;
    filename = cellstr(filename);
else
    NumberOfFiles = 0;
end

% Choose first frame to orient others
[name_imgA,path_imgA]=uigetfile('*.*','Select video with initial frame',PathName);
filename_imgA = fullfile(path_imgA, name_imgA);
vid_imgA = VideoReader(char(filename_imgA));
base = readFrame(vid_imgA);
imgA = im2single(base(:,:,1));

pointsA = detectFASTFeatures(imgA, 'MinContrast', ptThresh);
[featuresA, pointsA] = extractFeatures(imgA, pointsA);

%Load masks
[name,path]=uigetfile('.mat','Select masks',PathName,'Multiselect','on');
masks = fullfile(path,name);
masks = cellstr(masks);
videonumber = 1;

%Find color preference for each video
while videonumber <= NumberOfFiles
    videoname = filename(videonumber);
    
    vidObj = VideoReader(char(videoname));
    
    
    vidObj.CurrentTime = 0;
    
    % Construct background
    background = zeros(vidObj.Height,vidObj.Width);
    for Time=vidObj.Duration/20:vidObj.Duration/20-1:vidObj.Duration-3600   % Use multiple fames from video for background
        
        vidObj.CurrentTime = Time;
        frame = readFrame(vidObj);
        imgB = im2single(frame(:,:,1));
        
        
        pointsB = detectFASTFeatures(imgB, 'MinContrast', ptThresh);
        
        [featuresB, pointsB] = extractFeatures(imgB, pointsB);
        indexPairs = matchFeatures(featuresA, featuresB);
        pointsA2 = pointsA(indexPairs(:, 1), :);
        pointsB = pointsB(indexPairs(:, 2), :);
        try
            [tform, pointsBm, pointsAm] = estimateGeometricTransform(pointsB, pointsA2, 'affine');
        catch
            disp(['Bad frame ', vidObj.Name,' ',num2str(Time)])
            continue
        end

        imgBold = imwarp(imgB, tform, 'OutputView', imref2d(size(imgB)));
        frame = imgBold;
        if isempty(background)
            background = imgBold;
        end
        
        
        [x_coor,y_coor]=find(frame>background);
        for i=1:length(x_coor)
            background(x_coor(i),y_coor(i)) = frame(x_coor(i),y_coor(i));
        end
        
        
        
    end
    
    
    
    
    
    
    
    % Find flies in every assigned frame in the video
    Time = 0;
    while Time<vidObj.Duration
        vidObj.CurrentTime = Time;
        frame = readFrame(vidObj);
        imgB = im2single(frame(:,:,1));
        pointsB = detectFASTFeatures(imgB, 'MinContrast', ptThresh);
        [featuresB, pointsB] = extractFeatures(imgB, pointsB);
        indexPairs = matchFeatures(featuresA, featuresB);
        pointsA2 = pointsA(indexPairs(:, 1), :);
        pointsB = pointsB(indexPairs(:, 2), :);
        
        try
            [tform, pointsBm, pointsAm] = estimateGeometricTransform(pointsB, pointsA2, 'affine');
        catch
            disp(['Bad frame ', vidObj.Name,' ',num2str(Time)])
            Time = floor(vidObj.CurrentTime + 60);
            if Time>vidObj.Duration && Time<vidObj.Duration+30
                Time = vidObj.Duration;
            end
            t=t+1;
            continue
        end
        
        imgBold = imwarp(imgB, tform, 'OutputView', imref2d(size(imgB)));
        frame = imgBold;
        bg = background*darker;
        differ = (im2uint8(bg-frame))*multip;
        allbw=false(size(differ));
        % Find flies for each mask
        for masknum = 1:length(masks)
            load(char(masks(masknum)));
            maskobj = bwconncomp(mask3, 8);
            numflies = maskobj.NumObjects;
            [~,name,~]=fileparts(char(masks(masknum)));
            Var(masknum) = cellstr(name);
            % Find orientation of tubes using masks
            box=false(size(mask3));
            box(maskobj.PixelIdxList{1,1}) = 1;
            [rows, columns] = find(box);
            topRow = min(rows);
            bottomRow = max(rows);
            leftColumn = min(columns);
            rightColumn = max(columns);
            orient = (bottomRow-topRow)-(rightColumn-leftColumn);
            onelog = differ;
            onelog(onelog<254) = 0;
            bw = onelog.*uint8(maskall);             
            bw = bwareaopen(bw, flyarea_min);                               % Delete objects smaller than permitted fly size
            cc = bwconncomp(bw, 8);                                         % Find all permitted objects
            
            stats = regionprops('table',cc,'MajorAxisLength');              % Delete large objects 
            x = find (table2array(stats(:,{'MajorAxisLength'}))>flylength*1.5);
            
            for i=1:length(x)
                bw(cc.PixelIdxList{x(i)}) = 0;
            end
            cc = bwconncomp(bw, 8);
            ar = regionprops(cc,'Centroid');                                % Find centers of remaining objects
            centroids = cat(1, ar.Centroid);
            ind=[];
            if isempty(centroids)==1
                disp('empty frame')
                disp(vidObj.CurrentTime)
                disp(masks(masknum))
                continue
            end
            % Find if there more than one object per tube and leave only biggest
            if orient>=0                                                    % find orientation of tubes
                indexing = 1;
            elseif orient<0
                indexing = 2;
            end
            sametube=[];
            bw = false(size(bw));
            ab = cellfun(@numel,cc.PixelIdxList);                           %find size of objects
            sametube(:,1)=centroids(:,indexing);
            sametube(:,2)=ab;
            for tubenumber = 1:size(sametube,1)
                near_flies = find(sametube(:,1)>(sametube(tubenumber,1)-tube_diameter)&sametube(:,1)<(sametube(tubenumber,1)+tube_diameter));
                [~,ind2] = max(sametube(near_flies,2));
                real_fly = near_flies(ind2);
                
                bw(cc.PixelIdxList{real_fly}) = true;
            end
            cc = bwconncomp(bw, 8);
            ar = regionprops(cc,'Centroid');
            centroids = cat(1, ar.Centroid);
            num = min(size(centroids,1),numflies);
            
            if num ~= 0
                
                
                IDX = kmeans(centroids(:,indexing),num , 'EmptyAction','singleton');
                bw = false(size(bw));
                
                
                for m = 1:num
                    y = find (IDX == m);
                    ab = [];
                    ab(y) = cellfun(@numel,cc.PixelIdxList(y));
                    j = find(ab == max(ab));
                    for l=1:length(j)
                        bw(cc.PixelIdxList{1,j(l)}) = true;
                    end
                end
                
            end
            
            % Find number of flies in each mask
            if exist ('mask1','var')==1                                     % Find flies in first color
                bw1 = bw.*mask1;
                cc1 = bwconncomp(bw1, 8);
                obj1(masknum,t) = cc1.NumObjects;
            end
            if exist ('mask2','var')==1                                     % Find flies in second color
                bw2 = bw.*mask2;
                cc2 = bwconncomp(bw2, 8);
                obj2(masknum,t) = cc2.NumObjects;
            end
            if exist ('mask3','var')==1                                     % Find flies in third color
                bw3 = bw.*mask3;
                cc3 = bwconncomp(bw3, 8);
                obj3(masknum,t) = cc3.NumObjects;
            end

            allbw = allbw+bw;
        end
        
        Time = floor(vidObj.CurrentTime + framerate);
        if Time>vidObj.Duration && Time<vidObj.Duration+30
            Time = vidObj.Duration;
        end
        t=t+1;
    end
    % Write number of flies in each color during the video into table with genotypes
    if exist ('obj1','var')==1
        T_green = array2table(obj1(:,1:t-1)','VariableNames', Var);
        T1 = [T1;T_green];
    end
    if exist ('obj2','var')==1
        T_blue = array2table(obj2(:,1:t-1)','VariableNames', Var);
        T2 = [T2;T_blue];
    end
    if exist ('obj3','var')==1
        T_red = array2table(obj3(:,1:t-1)','VariableNames', Var);
        T3 = [T3;T_red];
    end
    
    t=1;
    videonumber = videonumber+1;
end
% Combine table from all videos
for i=1:length(Var)
color_preference = setfield(color_preference, ['color_',Var{i}(7:end)],...
    [table2array(T1(:,i)),table2array(T2(:,i)),table2array(T3(:,i))]);
end
